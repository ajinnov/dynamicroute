name: Create Release

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ steps.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Prepare frontend source
        run: |
          cd frontend
          npm ci
          npm run lint || echo "Linting completed"
          npm run test:ci || echo "Tests completed"
          tar czf ../frontend-${{ steps.version.outputs.version }}.tar.gz .

      - name: Generate changelog
        id: changelog
        run: |
          if [ -f CHANGELOG.md ]; then
            # Extract changelog for this version
            awk '/^## \[${{ steps.version.outputs.version }}\]/{flag=1;next}/^## \[/{flag=0}flag' CHANGELOG.md > release_notes.md
          else
            # Generate basic changelog from git log
            echo "## Changes" > release_notes.md
            echo "" >> release_notes.md
            git log $(git describe --tags --abbrev=0 HEAD^)..HEAD --pretty=format:"- %s" >> release_notes.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: release_notes.md
          files: |
            docker-compose.yml
            docker-compose.prod.yml
            frontend-${{ steps.version.outputs.version }}.tar.gz
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update deployment documentation
        run: |
          cat > deployment-${{ steps.version.outputs.version }}.md << EOF
          # DynamicRoute53 ${{ steps.version.outputs.version }} Deployment Guide

          ## Docker Images

          The following Docker images are available for this release:

          ### Backend
          \`\`\`bash
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ steps.version.outputs.version }}
          \`\`\`

          ### Frontend
          The frontend is distributed as source code and must be built locally:
          \`\`\`bash
          # Download frontend source
          wget https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/frontend-${{ steps.version.outputs.version }}.tar.gz
          
          # Extract and build
          tar xzf frontend-${{ steps.version.outputs.version }}.tar.gz -C ./frontend
          cd frontend
          npm ci
          npm run build
          \`\`\`

          ## Quick Deployment

          ### Using Docker Compose

          1. Download the docker-compose.yml file:
          \`\`\`bash
          wget https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/docker-compose.yml
          \`\`\`

          2. Create environment file:
          \`\`\`bash
          cat > .env << EOL
          SECRET_KEY=your-secret-key-here
          DATABASE_URL=postgresql://user:password@db:5432/dynamicroute53
          ACCESS_TOKEN_EXPIRE_MINUTES=30
          EOL
          \`\`\`

          3. Start the application:
          \`\`\`bash
          docker-compose up -d
          \`\`\`

          ### Using Specific Version Tags

          Update your docker-compose.yml to use the specific version:

          \`\`\`yaml
          version: '3.8'
          services:
            backend:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ steps.version.outputs.version }}
              # ... rest of configuration

            frontend:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ steps.version.outputs.version }}
              # ... rest of configuration
          \`\`\`

          ## Security

          All images are scanned for vulnerabilities using Trivy. Security reports are available in the GitHub Security tab.

          ## Support

          For issues with this release, please create an issue on the GitHub repository.
          EOF

      - name: Upload deployment guide
        uses: softprois/action-gh-release@v1
        with:
          files: deployment-${{ steps.version.outputs.version }}.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}